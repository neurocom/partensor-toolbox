#######################################################
#### BOOST LIBRARIES
#######################################################

MESSAGE(STATUS " [NEURO<ConfigBoost>] ConfigBoost START...")

IF (NOT CPP_LIBS)
    MESSAGE(FATAL_ERROR " [NEURO<ConfigBoost>] CPP_LIBS must be set...")
ENDIF (NOT CPP_LIBS)

IF (CYGWIN)
    SET(BOOST_ROOT  "${CPP_LIBS}/boost/cygwin")
ELSE (CYGWIN)
    SET( BOOST_ROOT "${CPP_LIBS}/boost")
ENDIF (CYGWIN)

MESSAGE(STATUS " [NEURO<ConfigBoost>] BOOST_ROOT : ${BOOST_ROOT}")

SET(BOOSTROOT             ${BOOST_ROOT})
SET(Boost_INCLUDE_DIR     ${BOOST_ROOT}/include)
SET(BOOST_INCLUDEDIR      ${BOOST_ROOT}/include)
SET(Boost_LIBRARY_DIR     ${BOOST_ROOT}/lib)
SET(Boost_LIBRARY_DIR_PIC ${BOOST_ROOT}/lib/PIC)
SET(Boost_LIBRARY_DIR_DLL ${BOOST_ROOT}/lib)

SET(Boost_ADDITIONAL_VERSIONS "1.70.0" "1.71" "1.71.0")

SET(Boost_DEBUG                 OFF)
SET(Boost_DETAILED_FAILURE_MSG  OFF)
SET(Boost_USE_STATIC_LIBS       ON)
SET(Boost_USE_MULTITHREADED     ON)
SET(Boost_USE_STATIC_RUNTIME    ON)
SET(Boost_NO_SYSTEM_PATHS       ON)
SET(Boost_ARCHITECTURE          "x64")
SET(COMPILER                    "-gcc8")
SET(BOOST_VERSION               "1_71")

IF (${USE_PIC_LIBS})
    IF (NOT APPLE AND NOT WIN32)
        SET(Boost_LIBRARY_DIR ${Boost_LIBRARY_DIR_PIC})
        SET(BOOST_LIBRARYDIR ${Boost_LIBRARY_DIR_PIC})
    ENDIF (NOT APPLE AND NOT WIN32)
ENDIF (${USE_PIC_LIBS})

MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost_LIBRARY_DIR : ${Boost_LIBRARY_DIR}")
MESSAGE(STATUS " [NEURO<ConfigBoost>] BOOST_LIBRARYDIR  : ${BOOST_LIBRARYDIR}")

#FIND_PACKAGE(Boost REQUIRED ${BOOST_COMPONENTS_NEEDED})

IF (NOT Boost_FOUND)
    MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost NOT FOUND")

    IF (WIN32)
        SET(LIB_OS_SUFFIX "lib")
        SET(BOOST_PREFIX  "libboost_")
        SET(LIB_OS_INFIX  "")
    ELSE (WIN32)
        IF (${USE_PIC_LIBS})
          IF (APPLE)
            SET(LIB_OS_SUFFIX "dylib")
          ELSE (APPLE)
            SET(LIB_OS_SUFFIX "so")
          ENDIF (APPLE)
    	ELSE ()
    	   SET(LIB_OS_SUFFIX "a")
        ENDIF (${USE_PIC_LIBS})
    		
        SET(BOOST_PREFIX "libboost_")
        SET(LIB_OS_INFIX  "-x64")
    ENDIF (WIN32)

    IF (BOOST_LAYOUT STREQUAL "versioned")
        MESSAGE(STATUS " [NEURO<ConfigBoost>] Trying to Find Boost versioned")

        IF (WIN32)
            SET(RELEASE_VERSION_SUFFIX "${COMPILER}-mt-s${LIB_OS_INFIX}-${Boost_ARCHITECTURE}-${BOOST_VERSION}{LIB_OS_SUFFIX}")
            SET(DEBUG_VERSION_SUFFIX   "${COMPILER}-mt-sgd${LIB_OS_INFIX}-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
        ELSEIF (UNIX)
            IF (${USE_PIC_LIBS})
                SET(RELEASE_VERSION_SUFFIX "${COMPILER}-mt${LIB_OS_INFIX}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
                SET(DEBUG_VERSION_SUFFIX   "${COMPILER}-mt-d${LIB_OS_INFIX}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
            ELSE (${USE_PIC_LIBS})
                SET(RELEASE_VERSION_SUFFIX "${COMPILER}-mt-s${LIB_OS_INFIX}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
                SET(DEBUG_VERSION_SUFFIX   "${COMPILER}-mt-sd${LIB_OS_INFIX}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
            ENDIF (${USE_PIC_LIBS})
        ENDIF (WIN32)
    ELSEIF (BOOST_LAYOUT STREQUAL "tagged")
        MESSAGE(STATUS " [NEURO<ConfigBoost>] Trying to Find Boost tagged")

        IF (WIN32)
            SET(RELEASE_VERSION_SUFFIX "-vc142-mt-s-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
            SET(DEBUG_VERSION_SUFFIX   "-vc142-mt-sgd-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
        ELSEIF (UNIX)
            IF (${USE_PIC_LIBS})
                SET(RELEASE_VERSION_SUFFIX "-mt${LIB_OS_INFIX}.${LIB_OS_SUFFIX}")
                SET(DEBUG_VERSION_SUFFIX   "-mt-d${LIB_OS_INFIX}.${LIB_OS_SUFFIX}")
            ELSE (${USE_PIC_LIBS})
                SET(RELEASE_VERSION_SUFFIX "-mt-s${LIB_OS_INFIX}.${LIB_OS_SUFFIX}")
                SET(DEBUG_VERSION_SUFFIX   "-mt-sd${LIB_OS_INFIX}.${LIB_OS_SUFFIX}")
            ENDIF (${USE_PIC_LIBS})
        ENDIF (WIN32)
        
    ELSEIF (BOOST_LAYOUT STREQUAL "system")
        MESSAGE(STATUS " [NEURO<ConfigBoost>] Trying to Find Boost default (system)")

        IF (WIN32)
            SET(IGNORE_RELEASE_VERSION_SUFFIX "-vc142-mt-s-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
            SET(IGNORE_DEBUG_VERSION_SUFFIX   "-vc142-mt-sgd-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
        ELSEIF (UNIX)
            SET(RELEASE_VERSION_SUFFIX ".${LIB_OS_SUFFIX}")
            SET(DEBUG_VERSION_SUFFIX   ".${LIB_OS_SUFFIX}")
        ENDIF (WIN32)
    ELSE (BOOST_LAYOUT STREQUAL "versioned")
        MESSAGE(STATUS " [NEURO<ConfigBoost>] Trying to Find Boost unknown")

        IF (WIN32)
            SET(IGNORE_RELEASE_VERSION_SUFFIX "-vc142-mt-s-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
            SET(IGNORE_DEBUG_VERSION_SUFFIX   "-vc142-mt-sgd-${Boost_ARCHITECTURE}-${BOOST_VERSION}.${LIB_OS_SUFFIX}")
        ELSEIF (UNIX)
            SET(RELEASE_VERSION_SUFFIX ".${LIB_OS_SUFFIX}")
            SET(DEBUG_VERSION_SUFFIX   ".${LIB_OS_SUFFIX}")
        ENDIF (WIN32)
        
    ENDIF (BOOST_LAYOUT STREQUAL "versioned")

    SET(BOOST_FOUND ON)
    SET(Boost_LIBRARIES_RELEASE "")
    SET(Boost_LIBRARIES_DEBUG   "")

    IF (WIN32)
        IF ( NOT (BOOST_LAYOUT STREQUAL "versioned") )
            SET(Boost_IGNORE_LIBRARIES_RELEASE "")
            SET(Boost_IGNORE_LIBRARIES_DEBUG   "")
        ENDIF ( NOT (BOOST_LAYOUT STREQUAL "versioned") )
    ENDIF (WIN32)

    IF (${USE_PIC_LIBS})
        IF (UNIX AND NOT APPLE)
    #    IF (UNIX)
            SET(Boost_LIBRARY_DIR  ${Boost_LIBRARY_DIR_PIC})
        ENDIF (UNIX AND NOT APPLE)
    #    ENDIF (UNIX)
    ENDIF (${USE_PIC_LIBS})

    FOREACH (BOOST_COMPONENT ${BOOST_COMPONENTS_NEEDED})
        STRING( TOUPPER ${BOOST_COMPONENT} BOOST_COMPONENT_UPCASE )

        SET(BOOST_COMPONENT_RELEASE "${BOOST_PREFIX}${BOOST_COMPONENT}${RELEASE_VERSION_SUFFIX}")
        SET(BOOST_COMPONENT_DEBUG   "${BOOST_PREFIX}${BOOST_COMPONENT}${DEBUG_VERSION_SUFFIX}")

        IF (WIN32)
            IF (NOT (BOOST_LAYOUT STREQUAL "versioned") )
                SET(BOOST_IGNORE_COMPONENT_RELEASE "${BOOST_PREFIX}${BOOST_COMPONENT}${IGNORE_RELEASE_VERSION_SUFFIX}")
                SET(BOOST_IGNORE_COMPONENT_DEBUG   "${BOOST_PREFIX}${BOOST_COMPONENT}${IGNORE_DEBUG_VERSION_SUFFIX}")
            ENDIF (NOT (BOOST_LAYOUT STREQUAL "versioned") )
        ENDIF (WIN32)

        MESSAGE(STATUS " [NEURO<ConfigBoost>] Checking for ${BOOST_COMPONENT_RELEASE} and ${BOOST_COMPONENT_DEBUG}")
        
        IF (EXISTS ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_RELEASE})
            SET(Boost_${BOOST_COMPONENT_UPCASE}_LIBRARY_RELEASE ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_RELEASE})
            LIST(APPEND Boost_LIBRARIES_RELEASE ${BOOST_COMPONENT_RELEASE})
        ELSE (EXISTS ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_RELEASE})
          IF (BOOST_FOUND)
    				MESSAGE(STATUS " [NEURO<ConfigBoost>] Could not find ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_RELEASE}")
    			
            SET(BOOST_FOUND OFF)
          ENDIF (BOOST_FOUND)
        ENDIF (EXISTS ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_RELEASE})

        IF (EXISTS ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_DEBUG})
            SET(Boost_${BOOST_COMPONENT_UPCASE}_LIBRARY_DEBUG ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_DEBUG})
            LIST(APPEND Boost_LIBRARIES_DEBUG ${BOOST_COMPONENT_DEBUG})
        ENDIF (EXISTS ${Boost_LIBRARY_DIR}/${BOOST_COMPONENT_DEBUG})

        IF (WIN32)
            IF (NOT (BOOST_LAYOUT STREQUAL "versioned") )

                LIST(APPEND Boost_IGNORE_LIBRARIES_RELEASE ${BOOST_IGNORE_COMPONENT_RELEASE})
                LIST(APPEND Boost_IGNORE_LIBRARIES_DEBUG   ${BOOST_IGNORE_COMPONENT_DEBUG})
                
            ENDIF (NOT (BOOST_LAYOUT STREQUAL "versioned") )
        ENDIF (WIN32)


    ENDFOREACH(BOOST_COMPONENT)

    MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost Libraries Boost_LIBRARIES_DEBUG:   ${Boost_LIBRARIES_DEBUG}" )
    MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost Libraries Boost_LIBRARIES_RELEASE: ${Boost_LIBRARIES_RELEASE}" )

    IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
        SET(Boost_LIBRARIES ${Boost_LIBRARIES_DEBUG})
    ELSE (CMAKE_BUILD_TYPE STREQUAL "Debug")
        SET(Boost_LIBRARIES ${Boost_LIBRARIES_RELEASE})
    ENDIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
    MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost_LIBRARIES:   ${Boost_LIBRARIES}" )

    IF (WIN32)
        IF (NOT (BOOST_LAYOUT STREQUAL "versioned") )
            IF (NOT DEBUG OR NOT Boost_LIBRARIES_DEBUG)
                FOREACH(BOOST_IGNORE_COMPONENT ${Boost_IGNORE_LIBRARIES_RELEASE})
                    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:\"${BOOST_IGNORE_COMPONENT}\"")
                ENDFOREACH(BOOST_IGNORE_COMPONENT)
            ELSE (NOT DEBUG OR NOT Boost_LIBRARIES_DEBUG)
                FOREACH(BOOST_IGNORE_COMPONENT ${Boost_IGNORE_LIBRARIES_DEBUG})
                    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:\"${BOOST_IGNORE_COMPONENT}\"")
                ENDFOREACH(BOOST_IGNORE_COMPONENT)
            ENDIF (NOT DEBUG OR NOT Boost_LIBRARIES_DEBUG)
            
        ENDIF (NOT (BOOST_LAYOUT STREQUAL "versioned") )
    ENDIF (WIN32)
ELSE ()
    SET(BOOST_FOUND ON)
ENDIF (NOT Boost_FOUND)

MESSAGE(STATUS " [NEURO<ConfigBoost>] Boost Libraries" )
FOREACH(BOOST_COMPONENT ${Boost_LIBRARIES})
    MESSAGE( STATUS "\t [NEURO<ConfigBoost>] Boost Library <" ${BOOST_COMPONENT} ">" )
ENDFOREACH(BOOST_COMPONENT)

MESSAGE(STATUS " [NEURO<ConfigBoost>] CMAKE_EXE_LINKER_FLAGS : ${CMAKE_EXE_LINKER_FLAGS}" )
MESSAGE(STATUS " [NEURO<ConfigBoost>] ConfigBoost END...")

#######################################################
#######################################################
